using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.UI;
using UnityEditor;
namespace Mahrq
{
    /// <summary>
    /// Resources:          Icons - https://gist.github.com/MattRix/c1f7840ae2419d8eb2ec0695448d4321
    /// </summary>
    public class DialogueViewerEditor : EditorWindow
    {
        private static DialogueViewerEditor editorWindow;
        private string editorPrefsKey = "DIALOGUE_VIEWER";
        private SerializedObject serializedObject;

        [SerializeField]
        private Text textSpeaker;
        [SerializeField]
        private Text textDialogueContent;
        [SerializeField]
        private DialogueStage[] dialogueSequence;
        private SerializedProperty DialogueSequence;
        private int sequenceIndexer = 0;
        [SerializeField]
        private ReferenceData referenceData;

        private Vector2 scrollPos;

        private bool inEditMode = false;
        [SerializeField]
        private bool editOverwriteWarning = true;
        private string editSpeaker;
        private string editContent;
        private int editFontSize;
        private DialogueStage editSelectedDialogue;
        [SerializeField]
        private DialogueChoice[] editDialogueChoices;
        private SerializedProperty EditDialogueChoices;

        [MenuItem("Mahrq/Dialogue Viewer")]
        static void StartWindow()
        {
            editorWindow = GetWindow<DialogueViewerEditor>();
            editorWindow.titleContent = new GUIContent("Dialogue Viewer Editor");
            editorWindow.Show();
        }
        private void OnEnable()
        {
            editorWindow = this;
            if (EditorPrefs.HasKey(editorPrefsKey))
            {
                string jsonData = EditorPrefs.GetString(editorPrefsKey, JsonUtility.ToJson(this, false));
                JsonUtility.FromJsonOverwrite(jsonData, this);

            }
            serializedObject = serializedObject == null ? new SerializedObject(this) : serializedObject;
            DialogueSequence = DialogueSequence == null ? serializedObject.FindProperty("dialogueSequence") : DialogueSequence;
            EditDialogueChoices = EditDialogueChoices == null ? serializedObject.FindProperty("editDialogueChoices") : EditDialogueChoices;
            referenceData = referenceData == null ? new ReferenceData() : referenceData;
            if (referenceData != null)
            {
                referenceData.LoadDialogueAssets(ref dialogueSequence);
            }
            InitialiseSkin();
            EditorApplication.playModeStateChanged -= EditorStateChangedCallback;
            EditorApplication.playModeStateChanged += EditorStateChangedCallback;      
        }
        private void OnDisable()
        {
            EditorApplication.playModeStateChanged -= EditorStateChangedCallback;
            referenceData.SaveDialogueAssetPaths(dialogueSequence);
            string jsonData = JsonUtility.ToJson(this, false);
            EditorPrefs.SetString(editorPrefsKey, jsonData);
        }
        /// <summary>
        /// Caching the default GUI skin because it has default properties and assets that are very hard to
        /// find and edit. The default skin has over 600 items in it's customStyles properties...
        /// 
        /// Main reason for doing this is because the skin associated with adding elements to arrays is found in the
        /// default skin, but not in the skin generated by the asset menu. In addition, various elements and textures are
        /// different from the default skin and the ones generated from the asset menu.
        /// </summary>
        private GUISkin cachedNormalSkin;
        private void OnGUI()
        {
            cachedNormalSkin = GUI.skin;
            GUI.skin = editorSkin;
            serializedObject.Update();
            scrollPos = EditorGUILayout.BeginScrollView(scrollPos);
            EditorGUILayout.BeginVertical();
            EditorGUILayout.LabelField("Text Component References", editorSkin.label);
            EditorGUILayout.Space(4);
            textSpeaker = (Text)EditorGUILayout.ObjectField("Speaker", textSpeaker, typeof(Text), true);
            EditorGUILayout.Space(2);
            textDialogueContent = (Text)EditorGUILayout.ObjectField("Content", textDialogueContent, typeof(Text), true);
            EditorGUILayout.Space(2);
            //Switching back to the cached default skin before the array input then back to the styled feels jank but it works
            //in having a textured array list as opposed to an untextured one.
            GUI.skin = cachedNormalSkin;
            EditorGUILayout.PropertyField(DialogueSequence, true);
            GUI.skin = editorSkin;
            EditorGUILayout.Space(20);
            GUI_ReferenceSetUpHelpBox();
            if (dialogueSequence != null)
            {
                if (dialogueSequence.Length > 0)
                {
                    //Button Layouts
                    EditorGUILayout.BeginHorizontal();
                    GUILayout.FlexibleSpace();
                    if (inEditMode)
                    {
                        if (editSelectedDialogue != null)
                        {
                            GUI_EditModeTrueButtons();
                        }
                        else
                        {
                            editSelectedDialogue = new DialogueStage();
                        }
                    }
                    else
                    {
                        GUI_EditModeFalseButtons();
                    }
                    EditorGUILayout.EndHorizontal();
                    //Input fields for dialogue text and font sizes.
                    EditorGUILayout.Space(8);
                    if (inEditMode)
                    {
                        if (editSelectedDialogue != null)
                        {
                            editOverwriteWarning = EditorGUILayout.Toggle("Overwrite Warning", editOverwriteWarning);
                            EditorGUILayout.Space(2);
                            editSpeaker = EditorGUILayout.TextField("Speaker", editSpeaker, editorSkin.textField);
                            EditorGUILayout.Space(2);
                            editFontSize = EditorGUILayout.IntField("Font Size", editFontSize, editorSkin.textField);
                            EditorGUILayout.Space(2);
                            editContent = EditorGUILayout.TextArea(editContent, editorSkin.textArea);
                            EditorGUILayout.Space(2);
                            //I hate that this jank works.
                            GUI.skin = cachedNormalSkin;
                            EditorGUILayout.PropertyField(EditDialogueChoices, true);
                            GUI.skin = editorSkin;
                            editSelectedDialogue.Speaker = editSpeaker;
                            editSelectedDialogue.FontSize = editFontSize;
                            editSelectedDialogue.Text = editContent;
                            editSelectedDialogue.Choices = editDialogueChoices;
                        }
                        else
                        {
                            editSelectedDialogue = new DialogueStage();
                        }
                    }
                }
            }
            EditorGUILayout.EndVertical();
            EditorGUILayout.EndScrollView();
            serializedObject.ApplyModifiedProperties();
        }
        #region OnGUI Elements
        private void GUI_EditModeTrueButtons()
        {
            //Undo any changes made.
            if (GUILayout.Button("Revert"))
            {
                CopyDialoguePropertiesForEdit(dialogueSequence[sequenceIndexer]);
                UpdateDialogueContent(sequenceIndexer);
                EditorGUI.FocusTextInControl(null);
            }
            EditorGUILayout.Space(4);
            //Preview how the text would look in the game without overriding the asset values.
            if (GUILayout.Button("Preview"))
            {
                UpdateDialogueContent(editSelectedDialogue);
                EditorGUI.FocusTextInControl(null);
            }
            EditorGUILayout.Space(4);
            //Overwrites the dialogue asset with the new values
            if (GUILayout.Button("Apply"))
            {
                EditorGUI.FocusTextInControl(null);
                //Equals method overridden to compare propertiy values
                if (!editSelectedDialogue.Equals(dialogueSequence[sequenceIndexer]))
                {
                    if (editOverwriteWarning)
                    {
                        if (DisplayMessageBox(MessageBoxContent.OverwriteAssetWarning))
                        {
                            OverwriteDialogueAsset(ref dialogueSequence[sequenceIndexer], editSelectedDialogue);
                            UpdateDialogueContent(sequenceIndexer);
                            inEditMode = false;
                        }
                    }
                    else
                    {
                        OverwriteDialogueAsset(ref dialogueSequence[sequenceIndexer], editSelectedDialogue);
                        UpdateDialogueContent(sequenceIndexer);
                        inEditMode = false;
                    }
                }
            }
            EditorGUILayout.Space(4);
            //Undo changes then quit edit mode.
            if (GUILayout.Button("Cancel"))
            {
                CopyDialoguePropertiesForEdit(dialogueSequence[sequenceIndexer]);
                UpdateDialogueContent(sequenceIndexer);
                EditorGUI.FocusTextInControl(null);
                inEditMode = false;
            }
        }
        private void GUI_EditModeFalseButtons()
        {
            sequenceIndexer = EditorGUILayout.IntField(sequenceIndexer, editorSkin.textField, GUILayout.MaxWidth(30));
            if (sequenceIndexer > dialogueSequence.Length - 1 || sequenceIndexer < 0)
            {
                sequenceIndexer = Mathf.Clamp(sequenceIndexer, 0, dialogueSequence.Length - 1);
            }
            EditorGUILayout.Space(4);
            //Jump to the assigned sequence indexer
            if (GUILayout.Button("Jump"))
            {
                if (ValidateDialogueSequence(dialogueSequence))
                {
                    UpdateDialogueContent(sequenceIndexer);
                }
                else
                {
                    DisplayMessageBox(MessageBoxContent.MissingDialogueSequence);
                }
                EditorGUI.FocusTextInControl(null);
            }
            EditorGUILayout.Space(4);
            if (GUILayout.Button("Back"))
            {
                if (ValidateDialogueSequence(dialogueSequence))
                {
                    sequenceIndexer--;
                    sequenceIndexer = Mathf.Clamp(sequenceIndexer, 0, dialogueSequence.Length - 1);
                    UpdateDialogueContent(sequenceIndexer);
                }
                else
                {
                    DisplayMessageBox(MessageBoxContent.MissingDialogueSequence);
                }
                EditorGUI.FocusTextInControl(null);
            }
            EditorGUILayout.Space(4);
            if (GUILayout.Button("Next"))
            {
                if (ValidateDialogueSequence(dialogueSequence))
                {
                    sequenceIndexer++;
                    sequenceIndexer = Mathf.Clamp(sequenceIndexer, 0, dialogueSequence.Length - 1);
                    UpdateDialogueContent(sequenceIndexer);
                }
                else
                {
                    DisplayMessageBox(MessageBoxContent.MissingDialogueSequence);
                }
                EditorGUI.FocusTextInControl(null);
            }
            EditorGUILayout.Space(4);
            if (GUILayout.Button("Edit"))
            {
                if (ValidateDialogueSequence(dialogueSequence))
                {
                    //Create cache of the selected dialogue to perform edits on it without overriding the asset.
                    editSelectedDialogue = editSelectedDialogue == null ? (DialogueStage)ScriptableObject.CreateInstance(typeof(DialogueStage)) : editSelectedDialogue;
                    editSelectedDialogue.Speaker = dialogueSequence[sequenceIndexer].Speaker;
                    editSelectedDialogue.Text = dialogueSequence[sequenceIndexer].Text;
                    editSelectedDialogue.FontSize = dialogueSequence[sequenceIndexer].FontSize;
                    editSelectedDialogue.Choices = dialogueSequence[sequenceIndexer].Choices;
                    //Set the values to the editor.
                    editSpeaker = editSelectedDialogue.Speaker;
                    editContent = editSelectedDialogue.Text;
                    editFontSize = editSelectedDialogue.FontSize;
                    editDialogueChoices = editSelectedDialogue.Choices;
                    inEditMode = true;
                }
                else
                {
                    DisplayMessageBox(MessageBoxContent.MissingDialogueSequence);
                }
                EditorGUI.FocusTextInControl(null);
            }
        }
        private void GUI_ReferenceSetUpHelpBox()
        {
            if (textSpeaker == null || textDialogueContent == null)
            {
                string helpMessage = "Assign the text components that will represent the speaker and the dialogue contents from the hierarchy scene view." +
                    "\nDue to the nature of scene objects, these references might need to be reassigned when rebooting the Unity editor.";
                EditorGUILayout.HelpBox(helpMessage, MessageType.Info, true);
            }
            else if (dialogueSequence == null || dialogueSequence.Length == 0)
            {
                string helpMessage = "Assign a Dialogue Stage to the Dialogue Sequence to start editing." +
                    "\nTo Create a Dialogue Stage, right click in the Assets folder Create -> Dialogue -> Dialogue Stage.";
                EditorGUILayout.HelpBox(helpMessage, MessageType.Info, true);
            }         
        }
        #endregion
        //Displays the Dialogue values to the scene Text components.
        private void UpdateDialogueContent(int index)
        {
            if (textSpeaker != null && textDialogueContent != null)
            {
                EditorUtility.SetDirty(textSpeaker);
                EditorUtility.SetDirty(textDialogueContent);
                dialogueSequence[index].SetDialogueText(ref textDialogueContent, ref textSpeaker);
            }
            else
            {
                string[] missingReference = new string[2];
                missingReference[0] = textSpeaker == null ? "[Text Speaker]" : "";
                missingReference[1] = textDialogueContent == null ? "[Text DialogueContent]" : "";
                EditorUtility.DisplayDialog("Missing Reference",
                    $"References for {missingReference[0]}{missingReference[1]} are missing.\n\nMake sure they are set.",
                    "Ok, My bad");
            }
        }
        private void UpdateDialogueContent(DialogueStage dialogueStage)
        {
            if (textSpeaker != null && textDialogueContent != null)
            {
                EditorUtility.SetDirty(textSpeaker);
                EditorUtility.SetDirty(textDialogueContent);
                dialogueStage.SetDialogueText(ref textDialogueContent, ref textSpeaker);
            }
            else
            {
                string[] missingReference = new string[2];
                missingReference[0] = textSpeaker == null ? "[Text Speaker]" : "";
                missingReference[1] = textDialogueContent == null ? "[Text DialogueContent]" : "";
                EditorUtility.DisplayDialog("Missing Reference",
                    $"References for {missingReference[0]}{missingReference[1]} are missing.\n\nMake sure they are set.",
                    "Ok, My bad");
            }
        }
        private void SetInstanceIDs()
        {
            if (textSpeaker != null && textDialogueContent != null)
            {
                referenceData.SaveTextReference(new Text[] { textSpeaker, textDialogueContent });
            }
        }
        private void UpdateReferences()
        {
            textSpeaker = referenceData.LoadTextReference(DialogueComponent.Speaker);
            textDialogueContent = referenceData.LoadTextReference(DialogueComponent.Content);
        }
        private void EditorStateChangedCallback(PlayModeStateChange state)
        {
            switch (state)
            {
                case PlayModeStateChange.EnteredEditMode:
                    UpdateReferences();
                    break;
                case PlayModeStateChange.ExitingEditMode:
                    SetInstanceIDs();
                    break;
                case PlayModeStateChange.EnteredPlayMode:
                    UpdateReferences();
                    break;
                case PlayModeStateChange.ExitingPlayMode:
                    break;
                default:
                    break;
            }
        }
        private void CopyDialoguePropertiesForEdit(DialogueStage targetToCopy)
        {
            //Set values to the dummy copy
            editSelectedDialogue.Speaker = targetToCopy.Speaker;
            editSelectedDialogue.Text = targetToCopy.Text;
            editSelectedDialogue.FontSize = targetToCopy.FontSize;
            editSelectedDialogue.Choices = targetToCopy.Choices;
            //Update the editor
            editSpeaker = targetToCopy.Speaker;
            editContent = targetToCopy.Text;
            editFontSize = targetToCopy.FontSize;
            editDialogueChoices = targetToCopy.Choices;
        }
        private void OverwriteDialogueAsset(ref DialogueStage asset, DialogueStage newData)
        {
            asset.Speaker = newData.Speaker;
            asset.FontSize = newData.FontSize;
            asset.Text = newData.Text;
            asset.Choices = newData.Choices;
        }
        private bool DisplayMessageBox(MessageBoxContent message)
        {
            switch (message)
            {
                case MessageBoxContent.StillInEditModeWarning:
                    return EditorUtility.DisplayDialog("Still In Edit Mode",
                    "You are still in edit mode." +
                    "\nPlease exit edit mode by clicking the 'Edit' or 'Cancel' button or apply the changes by clicking the 'Apply' button",
                    "Aight");
                case MessageBoxContent.OverwriteAssetWarning:
                    return EditorUtility.DisplayDialog("Overwrite Asset",
                    $"You are about to overwrite the asset [{dialogueSequence[sequenceIndexer].name}] with the new values." +
                    "\n\nAre you sure?",
                    "Do It!",
                    "No");
                case MessageBoxContent.MissingDialogueSequence:
                    return EditorUtility.DisplayDialog("Missing Dialogue Sequence",
                    $"You have no elements in the Dialogue Sequence or the reference to some of them are missing",
                    "Aight");
                default:
                    return false;
            }
        }
        private bool ValidateDialogueSequence(DialogueStage[] collection)
        {
            if (collection != null)
            {
                if (collection.Length > 0)
                {
                    for (int i = 0; i < collection.Length; i++)
                    {
                        if (collection[i] == null)
                        {
                            return false;
                        }
                    }
                    return true;
                }
            }
            return false;
        }
        [System.Serializable]
        private class ReferenceData
        {
            public int[] _txtComponentIDs;
            public string[] _dialogueAssetPaths;
            public ReferenceData()
            {
                _txtComponentIDs = new int[System.Enum.GetValues(typeof(DialogueComponent)).Length];
            }
            public void SaveTextReference(Text[] components)
            {
                if (components != null && _txtComponentIDs != null)
                {
                    if (components.Length == _txtComponentIDs.Length)
                    {
                        for (int i = 0; i < components.Length; i++)
                        {
                            _txtComponentIDs[i] = components[i].GetInstanceID();
                        }
                    }
                }
            }
            public Text LoadTextReference(DialogueComponent component)
            {
                if (_txtComponentIDs != null && _txtComponentIDs.Length == System.Enum.GetValues(typeof(DialogueComponent)).Length)
                {
                    Text txt = (Text)EditorUtility.InstanceIDToObject(_txtComponentIDs[(int)component]);
                    return txt;
                }
                return null;
            }
            public void SaveDialogueAssetPaths(DialogueStage[] collection)
            {
                if (collection != null && collection.Length > 0)
                {
                    if (_dialogueAssetPaths == null || _dialogueAssetPaths.Length < collection.Length)
                    {
                        _dialogueAssetPaths = new string[collection.Length];
                    }
                    for (int i = 0; i < collection.Length; i++)
                    {
                        _dialogueAssetPaths[i] = AssetDatabase.GetAssetPath(collection[i]);
                    }
                }
            }
            public void LoadDialogueAssets(ref DialogueStage[] collection)
            {
                if (collection != null)
                {
                    if (collection.Length == _dialogueAssetPaths.Length)
                    {
                        for (int i = 0; i < collection.Length; i++)
                        {
                            collection[i] = (DialogueStage)AssetDatabase.LoadAssetAtPath(_dialogueAssetPaths[i], typeof(DialogueStage));
                        }
                    }

                }
            }
        }
        public enum DialogueComponent
        {
            Speaker,
            Content
        }
        public enum MessageBoxContent
        {
            StillInEditModeWarning,
            OverwriteAssetWarning,
            MissingDialogueSequence
        }
        #region Styling
        private GUISkin editorSkin;
        private void InitialiseSkin()
        {
            editorSkin = (GUISkin)EditorGUIUtility.Load("EditorSkins/DialogueViewerEditor.guiskin");
        }
        #endregion
    }
}